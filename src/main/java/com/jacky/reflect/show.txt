Type是Java语言中所有类型的公共父接口.
Type的子类——Class、ParameterizedType、 TypeVariable、GenericArrayType、WildcardType。
1。
ParameterizedType：参数化类型。参数化类型即我们通常所说的泛型类型。
以下是三个主要的方法：
getRawType(): Type
该方法的作用是返回当前的ParameterizedType的类型。如一个List，返回的是List的Type，即返回当前参数化类型本身的Type。

getOwnerType(): Type
返回ParameterizedType类型所在的类的Type。如Map.Entry<String, Object>这个参数化类型返回的事Map(因为Map.Entry这个类型所在的类是Map)的类型。

getActualTypeArguments(): Type[]
该方法返回参数化类型<>中的实际参数类型， 如 Map<String,Person> map 这个 ParameterizedType 返回的是 String 类,Person 类的全限定类名的 Type Array。注意: 该方法只返回最外层的<>中的类型，无论该<>内有多少个<>
2.
TypeVariable：类型变量
范型信息在编译时会被转换为一个特定的类型, 而TypeVariable就是用来反映在JVM编译该泛型前的信息。(通俗的来说，TypeVariable就是我们常用的T，K这种泛型变量)

getBounds(): Type[]:
返回当前类型的上边界，如果没有指定上边界，则默认为Object。

getName(): String:
返回当前类型的类名

getGenericDeclaration(): D
返回当前类型所在的类的Type。
3.

GenericArrayType：泛型数组类型：
组成数组的元素中有泛型则实现了该接口; 它的组成元素是 ParameterizedType 或 TypeVariable 类型。(通俗来说，就是由参数类型组成的数组。如果仅仅是参数化类型，则不能称为泛型数组，而是参数化类型)。
注意：无论从左向右有几个[]并列，这个方法仅仅脱去最右边的[]之后剩下的内容就作为这个方法的返回值。

getGenericComponentType(): Type:

返回组成泛型数组的实际参数化类型，如List[] 则返回 List。

4.
WildcardType: 通配符类型
表示通配符类型，比如 <?>, <? Extends Number>等

getLowerBounds(): Type[]:    得到下边界的数组
getUpperBounds(): Type[]:    得到上边界的type数组

注：如果没有指定上边界，则默认为Object，如果没有指定下边界，则默认为String

作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。




泛型的擦除的原因以及Java中Type的作用
其实在jdk1.5之前Java中只有原始类型而没有泛型类型，而在JDK 1.5 之后引入泛型，但是这种泛型仅仅存在于编译阶段，
当在JVM运行的过程中，与泛型相关的信息将会被擦除，如List与List<Integer>都将会在运行时被擦除成为List这个类型。
而类型擦除机制存在的原因正是因为如果在运行时存在泛型，那么将要修改JVM指令集，这是非常致命的。
此外，原始类型在会生成字节码文件对象，而泛型类型相关的类型并不会生成与其相对应的字节码文件(因为泛型类型将会被擦除)，
因此，无法将泛型相关的新类型与class相统一。因此，为了程序的扩展性以及为了开发需要去反射操作这些类型，就引入了Type这个类型
，并且新增了ParameterizedType, TypeVariable, GenericArrayType, WildcardType四个表示泛型相关的类型，再加上Class，
这样就可以用Type类型的参数来接受以上五种子类的实参或者返回值类型就是Type类型的参数。统一了与泛型有关的类型和原始类型Class。
而且这样一来，我们也可以通过反射获取泛型类型参数。
